// UI Components

.btn {
  padding: 14px;
  display: block;
  font-size: 16px;
  background: none;
  font-weight: 700;
  border: 2px solid;
  line-height: 1.5em;
  text-align: center;
  position: relative;
  text-decoration: none;
  text-transform: capitalize;
  transition: color .2s ease-out, background .2s ease-out, border-color .2s ease-out;
  &:hover,
  &:focus {
    .arrow {
      &:after {
        left: 1px;
      }
      &.-long:after {
        left: -.19em;
        letter-spacing: .1em;
      }
    }
  }
  .arrow {
    top: 50%;
    margin-left: 10px;
    position: absolute;
    transform: translateY(-50%);
    &:hover,
    &:focus {
      &:after {
        left: -1px;
      }
      &.-long:after {
        left: 0;
        letter-spacing: 0;
      }
    }
  }
}

// Button mixin
@mixin button($color, $background) {
  @extend .btn;
  color: $color;
  border-color: $color;
  &:hover,
  &:focus {
    background: $background;
    border-color: $background;
  }
}

// Arrows
@mixin arrow($color) {
  width: 12px;
  height: 12px;
  border: none;
  background: none;
  position: relative;
  display: inline-block;
  &:before {
    top: 2px;
    right: 6px;
    width: 8px;
    height: 8px;
    content: '';
    position: absolute;
    transform: rotate(-45deg);
    transition: box-shadow .2s ease-out;
    box-shadow: 2px 2px 0 $color, 3px 2px 0 $color, 2px 3px 0 $color, 3px 3px 0 $color;
  }
  &:after {
    width: 0;
    height: 0;
    left: -1px;
    bottom: 5px;
    content: '•';
    color: $color;
    line-height: 0;
    font-size: 14px;
    position: absolute;
    transition: left .1s ease-out, bottom .1s ease-out, letter-spacing .1s ease-out, color .2s ease-out;
  }
  
  &.-long {
    width: 22px;
    &:after {
      left: 0;
      content: '•••';
      text-align: right;
    }
  }

  &.-left {
    transform: rotate(180deg);
  }
  
  &:hover,
  &:focus {
    outline: none;
    &:after {
      left: 1px;
    }
    &.-long:after {
      left: -.19em;
      letter-spacing: .1em;
    }
  }
}

.arrow {
  @include arrow($black);
}

// "X" button — used as a "plus" and  "close" button
.x-button {
  width: 36px;
  height: 36px;
  background: none;
  position: relative;
  border-radius: 100%;
  border: 2px solid $brand-primary;
  transition: border-color .2s ease-out, background .2s ease-out;
  &:before,
  &:after {
    left: 50%;
    height: 0;
    content: '•';
    line-height: 0;
    font-size: 10px;
    position: absolute;
    color: $brand-primary;
    transform: translateX(-50%);
    transition: top .2s ease-out, bottom .2s ease-out, color .2s ease-out;
  }
  &:before {
    top: 10px;
  }
  &:after {
    bottom: 9px;
  }

  // Hover states
  &:hover,
  &:focus {
    outline: none;
    border-color: $brand-secondary;
    &:before {
      top: 8px;
      color: $brand-secondary;
    }
    &:after {
      bottom: 7px;
      color: $brand-secondary;
    }
    .x {
      &:before,
      &:after {
        background: $brand-secondary;
      }
    }
  }

  .x {
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    position: absolute;
    transform: translateZ(0); // A hack to keep the :before and :after (which because rotated involve fractional pixels) from dancing around on screen resize due to browser rounding in Chrome
    &:before,
    &:after {
      left: 50%;
      width: 12px;
      content: '';
      height: 2px;
      bottom: 50%;
      position: absolute;
      background: $brand-primary;
      transition: background .2s ease-out;
    }
    &:before {
      transform-origin: left bottom;
      transform: rotate(45deg) translate(-50%, 50%);
    }
    &:after {
      transform-origin: left bottom;
      transform: rotate(-45deg) translate(-50%, 50%);
    }
  }

  // Plus version
  &.-plus {
    border-color: $white;
    transform: rotate(-45deg);

    &:before,
    &:after {
      color: $white;
    }
    .x {
      &:before,
      &:after {
        background: $white;
      }
    }
  }
}